data Foo = Bar Double

data MaybeI = JustI Double | Nothing

fun not (b : Bool) : Bool := { if b then false else true }

fun and (p : Bool, q : Bool) : Bool := { if p then (if q then true else false) else false }

fun or (p : Bool, q : Bool) : Bool := { if p then true else (if q then true else false) }

fun factorial (x : Double) : Double := {
  if (x <= 0) then 1
  else x * @factorial(x - 1)
}

fun even (x: Double) : Bool := {
  if (x <= 0) then true
  else @not(@odd(x - 2))
}

fun odd (x: Double) : Bool := {
  if (x <= 1) then true
  else @not(@even(x - 2))
}

fun nested_ifs : Double := {
  (if true then (if true then 4.0 else 5.0) else (if false then 2.0 else 3.0) + 1) * 2
}

fun main : Double := {
  case JustI 10.0 of
    JustI x => (if (@even(4)) then x else @factorial(6)) * @asdf
    Nothing => let res = 4.0 in @double_me(res + 1.0)
}

fun asdf : Double := {
  (if false then 5.0 else 10.0) + 2
}

fun double_me (x : Double) : Double := { x * 2 }

fun foo : Foo := {
  Bar 5.0
}

fun foo2 : Bool := {
  case Bar 5.0 of
    Bar x => true
}

fun lots_of_lets : Double := {
  let x = if true then 1 else 2 in
  let y = if true then x * 2 else x * 2 + 1 in
  y
}